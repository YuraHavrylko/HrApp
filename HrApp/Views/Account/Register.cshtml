@using System.Diagnostics
@using HrApp.Helpers.Extensions
@model HrApp.Models.RegisterModel

@{
    ViewBag.Title = "Registration";
}
<div class="register-box">
    <div class="register-logo">
        <a href="#"><b>Hr</b>App</a>
    </div>

    <div class="register-box-body">
        <p class="login-box-msg">Register a new membership</p>
        
        @using (Html.BeginForm("Register", "Account", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-group has-feedback @Html.AddClassIfPropertyInError(x => x.Email, "has-error")">
                @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.FirstName) })
                <span class="glyphicon glyphicon-user form-control-feedback"></span>
                <span style="display: block" class="help-block">@Html.ValidationMessageFor(model => model.FirstName)</span>
            </div>
            <div class="form-group has-feedback @Html.AddClassIfPropertyInError(x => x.LastName, "has-error")">
                @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.LastName) })
                <span class="glyphicon glyphicon-user form-control-feedback"></span>
                <span style="display: block" class="help-block">@Html.ValidationMessageFor(model => model.LastName)</span>
            </div>
            <div class="form-group has-feedback @Html.AddClassIfPropertyInError(x => x.Email, "has-error")">
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @type = "email", @placeholder = @Html.DisplayNameFor(m => m.Email) })
                <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
                <span style="display: block" class="help-block">@Html.ValidationMessageFor(model => model.Email)</span>
            </div>
            <div class="form-group has-feedback @Html.AddClassIfPropertyInError(x => x.Password, "has-error")">
                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @type = "password", @placeholder = @Html.DisplayNameFor(m => m.Password) })
                <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                <span style="display: block" class="help-block">@Html.ValidationMessageFor(model => model.Password)</span>
            </div>
            <div class="form-group has-feedback @Html.AddClassIfPropertyInError(x => x.PasswordConfirm, "has-error")">
                @Html.TextBoxFor(model => model.PasswordConfirm, new { @class = "form-control", @type = "password", @placeholder = @Html.DisplayNameFor(m => m.PasswordConfirm) })
                <span class="glyphicon glyphicon-log-in form-control-feedback"></span>
                <span style="display: block" class="help-block">@Html.ValidationMessageFor(model => model.PasswordConfirm)</span>
            </div>
            <div class="row">
                <div class="col-xs-5">
                    <button type="submit" class="btn btn-primary btn-raised btn-block">Register</button>
                </div>
            </div>
        }
        <div class="social-auth-links text-center">
            <p>- OR -</p>
            <a href="#" class="btn btn-block btn-social btn-facebook">
                <i class="fa fa-facebook"></i> Sign up using
                Facebook
            </a>
            <a href="#" class="btn btn-block btn-social btn-google">
                <i class="fa fa-google-plus"></i> Sign up using
                Google+
            </a>
        </div>
        
        @Html.ActionLink("I already have a membership", "Login", "Account", null, new {@class = "text-center" })
    </div>
</div>