@{
    ViewBag.Title = "Home Page";
}
@model HrApp.Models.Person
<div class="content-wrapper">
    <div class="panel-group">
        <div class="panel panel-default">
        <div class="row" style="padding: 5px; margin-top: 10px; margin-right: 10px; margin-left: 10px">
            <div class="col-md-6">
                <div class="btn-group btn-group-justified">
                    <a type="button" class="btn btn-primary btn-raised btn-block btn-flat" onclick="location.href='@Url.Action("Index", "Home", new {}, null)'">Back to list</a>
                    <a type="button" class="btn btn-primary btn-raised btn-block btn-flat" onclick="location.href = '@Url.Action("Edit", "Home", new {id = @Model.PersonId}, null)'">Edit</a>
                    <a type="button" class="btn btn-primary btn-raised btn-block btn-flat" onclick="location.href = '@Url.Action("Delete", "Home", new {id = @Model.PersonId}, null)'">Delete</a>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h3>
                            <b>@Model.FirstName @Model.LastName</b>
                        </h3>
                        <button class="btn btn-primary btn-raised btn-block btn-flat" onclick="location.href='@Url.Action("Create", "Job", new {id = @Model.PersonId}, null)'">Add job</button>
                        @if (@Model.Jobs != null)
                        {
                            foreach (var job in @Model.Jobs)
                            {
                                <p>
                                    <div class="row">
                                        <div class="col-md-8" style="padding-right: 5px">
                                            <b>@job.JobName</b>
                                        </div>
                                        <div class="col-md-4" style="padding-left: 0px">
                                            <div class="btn-group btn-group-justified">
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Edit", "Job", new {id = job.JobId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Delete", "Job", new {idPerson = job.PersonId, idJob = job.JobId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                            </div>
                                        </div>
                                    </div>
                                </p>
                            }
                        }
                        <p>
                            <b>
                                Date of birth
                            </b><br />@Model.Birthday.ToString("dd MMMM yyyy") (@{
                                var age = 0;
                                age = DateTime.Now.Year - @Model.Birthday.Year;
                            } @age years)
                        </p>
                        <p><b>City:</b> @Model.City</p>
                        <p><b>Phone:</b> @Model.Phone</p>
                        <p><b>Email:</b> @Model.Email</p>
                    </div>
                    <div class="col-md-6">
                        <p class="text-right">
                            <b>from @Model.Salary UAH/mon</b>
                        </p>
                        <button class="btn btn-primary btn-raised btn-block btn-flat" onclick="location.href='@Url.Action("Create", "TypeJob", new {id = @Model.PersonId}, null)'">Add type job</button>
                        @if (@Model.PersonTypeJobs != null)
                        {
                            foreach (var job in @Model.PersonTypeJobs)
                            {
                                <p>
                                    <div class="row">
                                        <div class="col-md-8" style="padding-right: 5px">
                                            @job.TypeJobName
                                        </div>
                                        <div class="col-md-4" style="padding-left: 0px">
                                            <div class="btn-group btn-group-justified">
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Edit", "TypeJob", new {id = job.PersonTypeJobId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Delete", "TypeJob", new {idPerson = job.PersonId, idPersonTypeJob = job.PersonTypeJobId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                            </div>
                                        </div>
                                    </div>
                                </p>
                            }
                        }
                        <p>

                            <div >
                                    <b>Education</b>
                                
                                    
                              
                            </div>
                        </p>

                        @if (@Model.Educations != null)
                        {
                            foreach (var education in @Model.Educations)
                            {

                                <div class="row">
                                    <div class="col-md-8" style="padding-right: 5px">
                                        <p>@education.SpecialityName</p>
                                    </div>
                                    <div class="col-md-4" style="padding-left: 0px">
                                        <div class="btn-group btn-group-justified">
                                            <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Edit", "Education", new {id = education.EducationId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                            <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Delete", "Education", new {idPerson = education.PersonId, idEducation = education.EducationId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                        </div>
                                    </div>
                                </div>
                                <p>
                                    @{
                                        var startDate = education.StartDate.Value.ToString("MM.yyyy");
                                        var endDate = education.FinishDate.Value != null ? education.FinishDate.Value.ToString("MM.yyyy") : "today";
                                        var totaldays = ((education.FinishDate.Value != null ? education.FinishDate.Value : DateTime.Now) - education.StartDate.Value).TotalDays;
                                        int years = (int)Math.Truncate(totaldays / 365);
                                        var month = (int)Math.Truncate((totaldays - (365 * years)) / 30);
                                        var during = (years > 0 ? years + " years" : "") + (month > 0 ? " " + month + " month" : "");
                                    }from @startDate to @endDate (@during)
                                </p>
                                <p>@education.EducationalInstitutionName</p>
                                <hr />
                                            }
                                        }
                        <button class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Create", "Education", new {id = @Model.PersonId}, null)'"><span>Add education</span></button>
                    </div>

                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-6">
                        <div>
                            <b>Work experience </b>
                            <p>@Model.WorkExpireance years</p>

                        </div>

                        @if (@Model.WorkExperiences != null)
                        {
                            foreach (var experience in @Model.WorkExperiences)
                            {

                                <div class="row">
                                    <div class="col-md-8" style="padding-right: 5px">
                                        <p>@experience.PositionName</p>
                                    </div>
                                    <div class="col-md-4" style="padding-left: 0px">
                                        <div class="btn-group btn-group-justified">
                                            <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Edit", "WorkExpireance", new {id = experience.WorkExperienceId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                            <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Delete", "WorkExpireance", new {idPerson = experience.PersonId, idWorkExperience = experience.WorkExperienceId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                        </div>
                                    </div>
                                </div>
                                <p>
                                    @{
                                        var startDate = experience.StartDate.Value.ToString("MM.yyyy");
                                        var endDate = experience.FinishDate.Value != null ? experience.FinishDate.Value.ToString("MM.yyyy") : "Today";
                                        var totaldays = ((experience.FinishDate.Value != null ? experience.FinishDate.Value : DateTime.Now) - experience.StartDate.Value).TotalDays;
                                        int years = (int)Math.Truncate(totaldays / 365);
                                        var month = (int)Math.Truncate((totaldays - (365 * years)) / 30);
                                        var duringExp = (years > 0 ? years + " years" : "") + (month > 0 ? " " + month + " month" : "");
                                    }from @startDate to @endDate (@duringExp)
                                </p>
                                <p>@experience.CompanyName</p>


                                <hr />
                               }
                               <button class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Create", "WorkExpireance", new {id = @Model.PersonId}, null)'"><span>Add work experience</span></button>

                            }
                        </div>

                    <div class="col-md-6">
                        <div>
                            <div>
                                <b>Knowlerge of language</b>
                            </div>
                            @if (@Model.Languages != null)
                            {
                                foreach (var language in @Model.Languages)
                                {
                                    <div class="row">
                                        <div class="col-md-8" style="padding-right: 5px">
                                            <li>@language.LanguageName - @language.LanguageLevelName</li>
                                        </div>
                                        <div class="col-md-4" style="padding-left: 0px">
                                            <div class="btn-group btn-group-justified">
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Edit", "Language", new {id = language.LanguageId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Delete", "Language", new {idPerson = language.PersonId, idLanguage = language.LanguageId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            <button class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Create", "Language", new {id = @Model.PersonId}, null)'"><span>add language</span></button>
                        </div>
                        <div>
                            <div>
                                <b>Professional skills</b>
                            </div>


                            @if (@Model.ProfessionalSkills != null)
                            {
                                foreach (var skill in @Model.ProfessionalSkills)
                                {
                                    <div class="row">
                                        <div class="col-md-8" style="padding-right: 5px">
                                            <li> @skill.SkillName</li>
                                        </div>

                                        <div class="col-md-4" style="padding-left: 0px">
                                            <div class="btn-group btn-group-justified">
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Edit", "ProfessionalSkill", new { id = skill.ProfessionalSkillId }, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                                <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Delete", "ProfessionalSkill", new { idPerson = skill.PersonId, idSkill = skill.ProfessionalSkillId }, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            <button class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Create", "ProfessionalSkill", new {id = @Model.PersonId}, null)'"><span>Add professional skills</span></button>

                        </div>
                    </div>
                </div>
            </div>
            

        </div>
        <hr style="border-color: lightgray"/>
        <div class="row" style="padding: 5px; margin-top: 10px; margin-right: 10px; margin-left: 10px">
                <div class="col-md-6">
                    <div>
                        <b>Interviews</b>
                    </div>
                    <br />
                    @if (@Model.Interviews != null)
                    {
                        foreach (var interview in @Model.Interviews)
                        {
                            <div class="row">
                                <div class="col-md-4">
                                    <p>@interview.InterviewDate.ToString("dd.MM.yyyy")</p>
                                </div>
                                <div class="col-md-5">
                                    <p class="text-right"><b>Point:</b> @interview.Point</p>
                                </div>
                                <div class="col-md-3" style="padding-left: 0px">
                                    <div class="btn-group btn-group-justified">
                                        <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Edit", "Interview", new {id = interview.InterviewId}, null)'"><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>
                                        <a class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href = '@Url.Action("Delete", "Interview", new {idPerson = interview.PersonId, idInterview = interview.InterviewId}, null)'"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span></a>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    <button class="btn btn-primary btn-raised btn-block btn-flat btn-xs" onclick="location.href='@Url.Action("Create", "Interview", new {id = @Model.PersonId}, null)'"><span>Add interview</span></button>


                </div>
            <div class="col-md-6">
                <p>
                    <b>Comments</b>
                </p>
                @if (@Model.Interviews != null)
                {
                    foreach (var interview in @Model.Interviews)
                    {
                        <p>@interview.Comment</p>
                    }
                }
            </div>

        </div>
        <hr style="border-color: lightgray" />
        <div>
            @using (Html.BeginForm("ShowCVInformation", "Home", new { personId = this.Model.PersonId }, FormMethod.Post, new { @class = "form-horizontal" }))
            {
                <button type="submit" class="btn btn-primary btnConfirm">Download</button>
            }
            </div>
      </div>

    </div>
</div>